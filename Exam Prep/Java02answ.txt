Java02. Eriks exam like questions.

----------------------------------------
S1. Are Arrays dynamic in Java ?

No once you created an array of a particular size, the size cannot be changed.

----------------------------------------
S2. What do you need to do when having an array of size 5, and you need to add a sixth element ?

To add a new element to the array, a new array has to be created with a bigger size, 
and all the elements from the old array copied to the new array.

----------------------------------------
S3.

In the following questions we have a Person Class.
public class Person {
    protected String firstName;
    private String lastName;
    public Person(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}



----------------------------------------
S3.
    Person ppp = new Person("Jens", "Jensen");
    System.out.println(ppp);

What will the above print out ?
explain.

Person@5b480cf9

class name of Person and hashcode of ppp

The method that prints the above looks like this:
    public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }
    

------------------------------------------------
S4. 
  if obj1.hashCode() is different from obj2.hashCode(), do you need to check equals() to see if they are different.

No if the hashCode are different, then equals should return false.


------------------------------------------------
S5. 
  if obj1.equals(obj2) is true, do you need to check the hashCode to see if they are equal ?

No.
Normally the hashCode is checked first, because of performance.
If the hashcode is the same for 2 objects, then equals method could still return false.
On the other hand, if 2 objects are equal, then they also have the same hashcode.

------------------------------------------------
S6. 
        ArrayList<Person> lstP = new ArrayList<>();
        Person pp = new Person("Jens", "Hansen");
        lstP.add(new Person("Lars", "Larsen"));
        lstP.add(pp);
        lstP.add(pp);
        lstP.add(new Person("Lars", "Larsen"));

What is the size of lstP in the above ?

4.

------------------------------------------
S7. Remove all Jens.

   Use a normal for loop to remove all Person with first name Jens from the above list.
   It is a simple line of code inside the for loop.

           for (int i = 0; i < lstP.size(); i++) {
               lstP.remove(pp);
           }
   The above would work.
   In a big list with few Jens, this would be better:
        while (lstP.contains(pp)) {
            lstP.remove(pp);
        }


------------------------------------------
S8.  Remove all with lastName = Larsen with a normal for loop
   a little more complicated line of code, but still possible to do in a few lines (in 1 line actually without using {} ).


        for (int i = 0; i < lstP.size(); i++) {
            if (lstP.get(i).getLastName().equals("Larsen")) lstP.remove(i);
        }

    or better
    
        for (int i = lstP.size()-1; i >= 0; i--) {
            if (lstP.get(i).getLastName().equals("Larsen")) lstP.remove(i);
        }
 
 The loop with i++ will not remove all Larsen objects from e.g. this list:

         ArrayList<Person> lstP = new ArrayList<>();
         Person pp = new Person("Jens", "Hansen");
         lstP.add(new Person("Lars1", "Larsen"));
         lstP.add(pp);
         lstP.add(pp);
         lstP.add(new Person("Lars2", "Larsen"));
         lstP.add(new Person("Lars3", "Larsen"));
         lstP.add(new Person("Lars4", "Larsen"));

------------------------------------------
S9. Remove all Jens , with the ArrayList function removeIf.

      lstP.removeIf(p-> p.firstName.equals("Jens"));

------------------------------------------
S10. Does it change anything in the above if you switch the line.

        ArrayList<Person> lstP = new ArrayList<>();
to
        LinkedList<Integer> lst = new LinkedList<>();

Explain why ?

No because they both implement the Interface List.

------------------------------------------
S11. Which of these methods are not part of the List interface declaration ?

add
remove
addAll
removeAll
equals
hashCode
trimToSize
sort
clear
size
forEach

All of the above methods are declared in the List interface except trimToSize.


------------------------------------------
S12. 
        LinkedList<Person> lstP = new LinkedList<>();
        Person pp = new Person("Jens", "Hansen");
        lstP.add(new Person("Lars", "Larsen"));
        lstP.add(pp);
        lstP.add(pp);
        lstP.add(new Person("Lars", "Larsen"));

        System.out.println(lstP.hashCode());
        System.out.println(lstP.size());

In the above code, where is the lstP.hashCode() method implemented ?

In class ArrayList.


------------------------------------------
S13. Where do LinkedList perform better than ArrayList ?

In insertion and deletion.


------------------------------------------
S14. What kind of BigO is the follwing

        ArrayList<Integer> lst1 = new ArrayList<>();
        ArrayList<Integer> lst2 = new ArrayList<>();
        int n = 20000;
        long start = System.nanoTime();
        for (int i = 0; i < n; i++) {
            lst1.add(i);
            lst2.add(i);
            bEqual = lst1.equals(lst2);
        }
        bEqual = lst1.equals(lst2);
        long end = System.nanoTime();
        printElapsed(start, end, "Equals=");
        System.out.println("bEqual=" + bEqual);


It is an n*n.
Because the for loop increases by n, and the equals method increases by n. So n*n.

------------------------------------------
S15. The above code takes 800milisec on my machine.
  Now if I change n to 40000, meaning n times 2,
  how long do you think the code will take to execute ?

The above was an n*n algorithm.
So if we time n*2 , then it should take 4 times as long.
So 4*800 = 3200 milisec.

------------------------------------------
S16. In the above code,
  where is the ls1.equals method implemented ?

In class ArrayList.

------------------------------------------
S17. Does interfaces in Java support multiple inheritance ?

Yes one interface can extend multiple interfaces. 

------------------------------------------
S18. Does Java support multiple inheritance ?

No one java class can only inherit from one class.

------------------------------------------
S19. How is Interfaces supported in plain JavaScript ?

JavaScript does not support interfaces.
Because JavaScript is typeless or dynamic typed.
And JavaScript is not compiled like Java, and it is really at compile time that you are notified 
that a certain class does not implement an interface correctly. 

TypeScript supports interfaces. (But TypeScript is not part of pensum).
The TypeScript compiler does not convert interface to JavaScript. 
It uses interface for type checking. 
This is also known as "duck typing" or "structural subtyping". An interface is defined with the 
keyword interface and it can include properties and method declarations using a function or an arrow function.

------------------------------------------
S20. 
        Set<Person> lstP = new HashSet<>();
        Person pp = new Person("Jens", "Hansen");
        lstP.add(new Person("Lars", "Larsen"));
        lstP.add(pp);
        lstP.add(pp);
        lstP.add(new Person("Lars", "Larsen"));

What is the size of lstP after above run ?

3.
Unlike an ArrayList, here pp is only added once.
Because a Set doest not allow duplicate objects.

------------------------------------------
S21. What should be added to Person in order to avoid Lars Larsen to show up twice in the above Set ?

equals and hashcode methods.


------------------------------------------
S22. If you only added equals method above. Will that work ?

No because the default hashcode will return false.
So they will be regarded as two different objects and the equals method will not be called.


------------------------------------------
S23. So try explain what does the hashCode() function do ?

Computes a value from 1 or more property/instance variable values.


------------------------------------------
S24. How do you sort a Collection ?

        List<Person> lstP = new ArrayList<>();
        lstP.add(new Person("Lars", "Larsen"));
        lstP.add(new Person("Jan", "Hansen"));
        lstP.add(new Person("Ole", "Smidt"));
        lstP.add(new Person("Lone", "Jensen"));

Write the above list out sorted after firstName and sorted after lastName

If lstP is an ArrayList, then use Collection.sort(lstP).
If lstP is changed to a TreeSet, then the collection will be maintained sorted when adding new elements.

Person should implement Comparable
public class Person implements Comparable<Person> {

Then if sorted after firstName the Comparable interface method compareTo
should look like this
    @Override
    public int compareTo(Person o) {
        return firstName.compareTo(o.firstName);
    }

Then if sorted after lastName the Comparable interface method compareTo
    @Override
    public int compareTo(Person o) {
        return firstName.compareTo(o.firstName);
    }

Use a class variable to hold an argument that decides whether to sort after firstName or lastName

The class variable could look like this
    public static boolean sortByFirstName = true;

And new compareTo
    @Override
    public int compareTo(Person o) {
        return
        (sortByFirstName) ? firstName.compareTo(o.firstName) : lastName.compareTo(o.lastName);
    }

------------------------------------------
S25. What are Generics ?

Generics are used to create Generic Classes and Generic methods which can work with different Types (Classes).
You pass a type as an argument to a Collection.
Generics are really helpful a compile time for example
if you create a collection of a certain type, if you try to add a different type to that collection you will get a compile error.


------------------------------------------
S26. How is Generics supported in plain JavaScript ?

JavaScript is a dynamically typed language and it doesn't have any generics.

------------------------------------------
S27. Create a simple class that use a generic type as argument.

class MyGenericList<T> {

It should encapsulate a List of the type T.
And implement the methods add, remove, get.

In the main program, create MyGenericList collections of two different types. E.g. String and Integer.

public class MyGenericList<T> {
    private List<T> values;

    public MyGenericList() {
        values = new ArrayList<>();
    }

    public void add(T value) {
        values.add(value);
    }

    public void remove(T value) {
        values.remove(value);
    }

    T get(int index) {
        return values.get(index);
    }
}


   public static void main(String[] args) {
	    MyGenericList<String> lst = new MyGenericList<>();
	    List<String> lst2 = new ArrayList<>();
	    lst.add("Kurt");


------------------------------------------
S28. What kind of pattern could you argue you have implemented in S27.

A facade object.

------------------------------------------
S29. If you only implemented add, remove and get in your MyGenericList,
     how will you print the following list out.


	MyGenericList<String> lst = new MyGenericList<>();
	    lst.add("Kurt");
	    lst.add("Jens");
	    lst.add("Viggo");
            System.out.println(lst);


       for (int i = 0; i < 3; i++) {
            System.out.println(lst.get(i));
        }

------------------------------------------
S30. This is legal code in Java.

    public int sum(int... numbers) {
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return sum;
    }

How can the sum method be called ?

int i = sum(1,3,4,5);

What exact type is numbers in the above method.

int[]


------------------------------------------

